// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - MessageRoot

@implementation MessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MessageRoot_FileDescriptor

static GPBFileDescriptor *MessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MSG_TYPE

GPBEnumDescriptor *MSG_TYPE_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ping\000LocationReq\000RegisterReq\000UsertrackRe"
        "q\000DrstatusReq\000OrderReq\000OrderEndReq\000Order"
        "RecReq\000OrderCancelReq\000OrderAssignReq\000Ord"
        "erDriverArriveReq\000OrderDriverPickupReq\000O"
        "rderRecEndReq\000OrderStartReq\000OrderAutoCos"
        "tReq\000OrderPayokReq\000OrderPrmissReq\000DrStat"
        "usWebReq\000Pong\000LocationRes\000RegisterRes\000Us"
        "ertrackRes\000DrstatusRes\000OrderRes\000OrderEnd"
        "Res\000OrderRecRes\000OrderCancelRes\000OrderAssi"
        "gnRes\000OrderDriverArriveRes\000OrderDriverPi"
        "ckupRes\000OrderRecEndRes\000OrderStartRes\000Ord"
        "erAutoCostRes\000OrderPayokRes\000OrderPrmissR"
        "es\000";
    static const int32_t values[] = {
        MSG_TYPE_Ping,
        MSG_TYPE_LocationReq,
        MSG_TYPE_RegisterReq,
        MSG_TYPE_UsertrackReq,
        MSG_TYPE_DrstatusReq,
        MSG_TYPE_OrderReq,
        MSG_TYPE_OrderEndReq,
        MSG_TYPE_OrderRecReq,
        MSG_TYPE_OrderCancelReq,
        MSG_TYPE_OrderAssignReq,
        MSG_TYPE_OrderDriverArriveReq,
        MSG_TYPE_OrderDriverPickupReq,
        MSG_TYPE_OrderRecEndReq,
        MSG_TYPE_OrderStartReq,
        MSG_TYPE_OrderAutoCostReq,
        MSG_TYPE_OrderPayokReq,
        MSG_TYPE_OrderPrmissReq,
        MSG_TYPE_DrStatusWebReq,
        MSG_TYPE_Pong,
        MSG_TYPE_LocationRes,
        MSG_TYPE_RegisterRes,
        MSG_TYPE_UsertrackRes,
        MSG_TYPE_DrstatusRes,
        MSG_TYPE_OrderRes,
        MSG_TYPE_OrderEndRes,
        MSG_TYPE_OrderRecRes,
        MSG_TYPE_OrderCancelRes,
        MSG_TYPE_OrderAssignRes,
        MSG_TYPE_OrderDriverArriveRes,
        MSG_TYPE_OrderDriverPickupRes,
        MSG_TYPE_OrderRecEndRes,
        MSG_TYPE_OrderStartRes,
        MSG_TYPE_OrderAutoCostRes,
        MSG_TYPE_OrderPayokRes,
        MSG_TYPE_OrderPrmissRes,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MSG_TYPE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MSG_TYPE_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MSG_TYPE_IsValidValue(int32_t value__) {
  switch (value__) {
    case MSG_TYPE_Ping:
    case MSG_TYPE_LocationReq:
    case MSG_TYPE_RegisterReq:
    case MSG_TYPE_UsertrackReq:
    case MSG_TYPE_DrstatusReq:
    case MSG_TYPE_OrderReq:
    case MSG_TYPE_OrderEndReq:
    case MSG_TYPE_OrderRecReq:
    case MSG_TYPE_OrderCancelReq:
    case MSG_TYPE_OrderAssignReq:
    case MSG_TYPE_OrderDriverArriveReq:
    case MSG_TYPE_OrderDriverPickupReq:
    case MSG_TYPE_OrderRecEndReq:
    case MSG_TYPE_OrderStartReq:
    case MSG_TYPE_OrderAutoCostReq:
    case MSG_TYPE_OrderPayokReq:
    case MSG_TYPE_OrderPrmissReq:
    case MSG_TYPE_DrStatusWebReq:
    case MSG_TYPE_Pong:
    case MSG_TYPE_LocationRes:
    case MSG_TYPE_RegisterRes:
    case MSG_TYPE_UsertrackRes:
    case MSG_TYPE_DrstatusRes:
    case MSG_TYPE_OrderRes:
    case MSG_TYPE_OrderEndRes:
    case MSG_TYPE_OrderRecRes:
    case MSG_TYPE_OrderCancelRes:
    case MSG_TYPE_OrderAssignRes:
    case MSG_TYPE_OrderDriverArriveRes:
    case MSG_TYPE_OrderDriverPickupRes:
    case MSG_TYPE_OrderRecEndRes:
    case MSG_TYPE_OrderStartRes:
    case MSG_TYPE_OrderAutoCostRes:
    case MSG_TYPE_OrderPayokRes:
    case MSG_TYPE_OrderPrmissRes:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CLIENT_TYPE

GPBEnumDescriptor *CLIENT_TYPE_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unkown\000Passenger\000Driver\000Travel\000";
    static const int32_t values[] = {
        CLIENT_TYPE_Unkown,
        CLIENT_TYPE_Passenger,
        CLIENT_TYPE_Driver,
        CLIENT_TYPE_Travel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CLIENT_TYPE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CLIENT_TYPE_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CLIENT_TYPE_IsValidValue(int32_t value__) {
  switch (value__) {
    case CLIENT_TYPE_Unkown:
    case CLIENT_TYPE_Passenger:
    case CLIENT_TYPE_Driver:
    case CLIENT_TYPE_Travel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RET_CODE

GPBEnumDescriptor *RET_CODE_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Failure\000";
    static const int32_t values[] = {
        RET_CODE_Success,
        RET_CODE_Failure,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RET_CODE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RET_CODE_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RET_CODE_IsValidValue(int32_t value__) {
  switch (value__) {
    case RET_CODE_Success:
    case RET_CODE_Failure:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Ping

@implementation Ping


typedef struct Ping__storage_ {
  uint32_t _has_storage_[1];
} Ping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Ping class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Ping__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Pong

@implementation Pong


typedef struct Pong__storage_ {
  uint32_t _has_storage_[1];
} Pong__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Pong class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Pong__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LocationReq

@implementation LocationReq

@dynamic longitude;
@dynamic latitude;
@dynamic speed;
@dynamic direction;
@dynamic orderId;
@dynamic connectUser;
@dynamic travelMile;
@dynamic travelAmount;
@dynamic expTime2;
@dynamic timestamp;

typedef struct LocationReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  NSString *travelMile;
  NSString *travelAmount;
  NSString *expTime2;
  double longitude;
  double latitude;
  double speed;
  double direction;
  uint64_t timestamp;
} LocationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_Longitude,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LocationReq__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_Latitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LocationReq__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "speed",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_Speed,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LocationReq__storage_, speed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "direction",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_Direction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LocationReq__storage_, direction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_OrderId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LocationReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_ConnectUser,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LocationReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "travelMile",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_TravelMile,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LocationReq__storage_, travelMile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "travelAmount",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_TravelAmount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(LocationReq__storage_, travelAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expTime2",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_ExpTime2,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(LocationReq__storage_, expTime2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = LocationReq_FieldNumber_Timestamp,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(LocationReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocationReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LocationReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\005\007\000\006\013\000\007\n\000\010\014\000\t\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LocationRes

@implementation LocationRes

@dynamic longitude;
@dynamic latitude;
@dynamic speed;
@dynamic direction;
@dynamic travelMile;
@dynamic travelAmount;
@dynamic expTime2;
@dynamic orderId;
@dynamic timestamp;

typedef struct LocationRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *travelMile;
  NSString *travelAmount;
  NSString *expTime2;
  NSString *orderId;
  double longitude;
  double latitude;
  double speed;
  double direction;
  uint64_t timestamp;
} LocationRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_Longitude,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LocationRes__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_Latitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LocationRes__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "speed",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_Speed,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LocationRes__storage_, speed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "direction",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_Direction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LocationRes__storage_, direction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "travelMile",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_TravelMile,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LocationRes__storage_, travelMile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "travelAmount",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_TravelAmount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LocationRes__storage_, travelAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expTime2",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_ExpTime2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LocationRes__storage_, expTime2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_OrderId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(LocationRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = LocationRes_FieldNumber_Timestamp,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(LocationRes__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocationRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LocationRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\005\n\000\006\014\000\007\010\000\010\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterReq

@implementation RegisterReq

@dynamic token;

typedef struct RegisterReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} RegisterReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = RegisterReq_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterReq__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterRes

@implementation RegisterRes


typedef struct RegisterRes__storage_ {
  uint32_t _has_storage_[1];
} RegisterRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RegisterRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserTrackReq

@implementation UserTrackReq


typedef struct UserTrackReq__storage_ {
  uint32_t _has_storage_[1];
} UserTrackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserTrackReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UserTrackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserTrackRes

@implementation UserTrackRes


typedef struct UserTrackRes__storage_ {
  uint32_t _has_storage_[1];
} UserTrackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserTrackRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UserTrackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DrstatusReq

@implementation DrstatusReq

@dynamic onOffStatus;
@dynamic status;

typedef struct DrstatusReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t onOffStatus;
  uint32_t status;
} DrstatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOffStatus",
        .dataTypeSpecific.className = NULL,
        .number = DrstatusReq_FieldNumber_OnOffStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DrstatusReq__storage_, onOffStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = DrstatusReq_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DrstatusReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DrstatusReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DrstatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DrstatusRes

@implementation DrstatusRes

@dynamic onOffStatus;
@dynamic status;
@dynamic timestamp;

typedef struct DrstatusRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t onOffStatus;
  uint32_t status;
  uint64_t timestamp;
} DrstatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOffStatus",
        .dataTypeSpecific.className = NULL,
        .number = DrstatusRes_FieldNumber_OnOffStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DrstatusRes__storage_, onOffStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = DrstatusRes_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DrstatusRes__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = DrstatusRes_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DrstatusRes__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DrstatusRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DrstatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderReq

@implementation OrderReq

@dynamic startAdd;
@dynamic endAdd;
@dynamic orderType2;
@dynamic startLatitude;
@dynamic startLongitude;
@dynamic orderId;
@dynamic endLatitude;
@dynamic endLongitude;

typedef struct OrderReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType2;
  NSString *startAdd;
  NSString *endAdd;
  NSString *orderId;
  double startLatitude;
  double startLongitude;
  double endLatitude;
  double endLongitude;
} OrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderReq_FieldNumber_StartAdd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderReq__storage_, startAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderReq_FieldNumber_EndAdd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderReq__storage_, endAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderType2",
        .dataTypeSpecific.className = NULL,
        .number = OrderReq_FieldNumber_OrderType2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderReq__storage_, orderType2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "startLatitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderReq_FieldNumber_StartLatitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderReq__storage_, startLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "startLongitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderReq_FieldNumber_StartLongitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderReq__storage_, startLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderReq_FieldNumber_OrderId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endLatitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderReq_FieldNumber_EndLatitude,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OrderReq__storage_, endLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "endLongitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderReq_FieldNumber_EndLongitude,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OrderReq__storage_, endLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\006\000\004\r\000\005\016\000\006\007\000\007\013\000\010\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderRes

@implementation OrderRes

@dynamic startAdd;
@dynamic endAdd;
@dynamic orderType2;
@dynamic startLatitude;
@dynamic startLongitude;
@dynamic orderId;
@dynamic endLatitude;
@dynamic endLongitude;

typedef struct OrderRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType2;
  NSString *startAdd;
  NSString *endAdd;
  NSString *orderId;
  double startLatitude;
  double startLongitude;
  double endLatitude;
  double endLongitude;
} OrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderRes_FieldNumber_StartAdd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderRes__storage_, startAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderRes_FieldNumber_EndAdd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderRes__storage_, endAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderType2",
        .dataTypeSpecific.className = NULL,
        .number = OrderRes_FieldNumber_OrderType2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderRes__storage_, orderType2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "startLatitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderRes_FieldNumber_StartLatitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderRes__storage_, startLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "startLongitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderRes_FieldNumber_StartLongitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderRes__storage_, startLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderRes_FieldNumber_OrderId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endLatitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderRes_FieldNumber_EndLatitude,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OrderRes__storage_, endLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "endLongitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderRes_FieldNumber_EndLongitude,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OrderRes__storage_, endLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\006\000\004\r\000\005\016\000\006\007\000\007\013\000\010\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderEndReq

@implementation OrderEndReq

@dynamic orderId;
@dynamic startTime;
@dynamic time;
@dynamic distance;
@dynamic cost;
@dynamic connectUser;

typedef struct OrderEndReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  uint64_t startTime;
  uint64_t time;
  double distance;
  double cost;
} OrderEndReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderEndReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndReq_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderEndReq__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndReq_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderEndReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "distance",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndReq_FieldNumber_Distance,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderEndReq__storage_, distance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "cost",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndReq_FieldNumber_Cost,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderEndReq__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndReq_FieldNumber_ConnectUser,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderEndReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderEndReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderEndReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\t\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderEndRes

@implementation OrderEndRes

@dynamic orderId;
@dynamic startTime;
@dynamic time;
@dynamic distance;
@dynamic cost;
@dynamic connectUser;

typedef struct OrderEndRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  uint64_t startTime;
  uint64_t time;
  double distance;
  double cost;
} OrderEndRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndRes_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderEndRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndRes_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderEndRes__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndRes_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderEndRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "distance",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndRes_FieldNumber_Distance,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderEndRes__storage_, distance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "cost",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndRes_FieldNumber_Cost,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderEndRes__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderEndRes_FieldNumber_ConnectUser,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderEndRes__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderEndRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderEndRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\t\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderRecReq

@implementation OrderRecReq

@dynamic orderId;
@dynamic timestamp;
@dynamic fromUser;
@dynamic longitude;
@dynamic latitude;
@dynamic orderType;

typedef struct OrderRecReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
  NSString *orderId;
  NSString *fromUser;
  uint64_t timestamp;
  double longitude;
  double latitude;
} OrderRecReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderRecReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecReq_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderRecReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "fromUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecReq_FieldNumber_FromUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderRecReq__storage_, fromUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecReq_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderRecReq__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecReq_FieldNumber_Latitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderRecReq__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecReq_FieldNumber_OrderType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderRecReq__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderRecReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderRecReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\003H\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderRecRes

@implementation OrderRecRes

@dynamic orderId;
@dynamic timestamp;
@dynamic fromUser;
@dynamic longitude;
@dynamic latitude;
@dynamic orderType;

typedef struct OrderRecRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
  NSString *orderId;
  NSString *fromUser;
  uint64_t timestamp;
  double longitude;
  double latitude;
} OrderRecRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecRes_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderRecRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecRes_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderRecRes__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "fromUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecRes_FieldNumber_FromUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderRecRes__storage_, fromUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecRes_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderRecRes__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecRes_FieldNumber_Latitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderRecRes__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecRes_FieldNumber_OrderType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderRecRes__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderRecRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderRecRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\003H\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderCancelReq

@implementation OrderCancelReq

@dynamic orderId;
@dynamic time;
@dynamic orderType;
@dynamic fromUser;
@dynamic role;

typedef struct OrderCancelReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
  uint32_t role;
  NSString *orderId;
  NSString *fromUser;
  uint64_t time;
} OrderCancelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderCancelReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelReq_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderCancelReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelReq_FieldNumber_OrderType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderCancelReq__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "fromUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelReq_FieldNumber_FromUser,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderCancelReq__storage_, fromUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "role",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelReq_FieldNumber_Role,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderCancelReq__storage_, role),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderCancelReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderCancelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\003\t\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderCancelRes

@implementation OrderCancelRes

@dynamic orderId;
@dynamic time;
@dynamic orderType;
@dynamic fromUser;
@dynamic role;

typedef struct OrderCancelRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
  uint32_t role;
  NSString *orderId;
  NSString *fromUser;
  uint64_t time;
} OrderCancelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelRes_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderCancelRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelRes_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderCancelRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelRes_FieldNumber_OrderType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderCancelRes__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "fromUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelRes_FieldNumber_FromUser,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderCancelRes__storage_, fromUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "role",
        .dataTypeSpecific.className = NULL,
        .number = OrderCancelRes_FieldNumber_Role,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderCancelRes__storage_, role),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderCancelRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderCancelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\003\t\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderAssignReq

@implementation OrderAssignReq

@dynamic startAdd;
@dynamic endAdd;
@dynamic orderId;
@dynamic time;
@dynamic content;
@dynamic connectUser;
@dynamic startLatitude;
@dynamic startLongitude;
@dynamic endLatitude;
@dynamic endLongitude;

typedef struct OrderAssignReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *startAdd;
  NSString *endAdd;
  NSString *orderId;
  NSString *content;
  NSString *connectUser;
  uint64_t time;
  double startLatitude;
  double startLongitude;
  double endLatitude;
  double endLongitude;
} OrderAssignReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_StartAdd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, startAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_EndAdd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, endAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_OrderId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_ConnectUser,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startLatitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_StartLatitude,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, startLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "startLongitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_StartLongitude,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, startLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "endLatitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_EndLatitude,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, endLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "endLongitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignReq_FieldNumber_EndLongitude,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OrderAssignReq__storage_, endLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderAssignReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderAssignReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\010\000\002\006\000\003\007\000\006\013\000\007\r\000\010\016\000\t\013\000\n\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderAssignRes

@implementation OrderAssignRes

@dynamic startAdd;
@dynamic endAdd;
@dynamic orderId;
@dynamic time;
@dynamic content;
@dynamic connectUser;
@dynamic startLatitude;
@dynamic startLongitude;
@dynamic endLatitude;
@dynamic endLongitude;

typedef struct OrderAssignRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *startAdd;
  NSString *endAdd;
  NSString *orderId;
  NSString *content;
  NSString *connectUser;
  uint64_t time;
  double startLatitude;
  double startLongitude;
  double endLatitude;
  double endLongitude;
} OrderAssignRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_StartAdd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, startAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_EndAdd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, endAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_OrderId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_ConnectUser,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startLatitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_StartLatitude,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, startLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "startLongitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_StartLongitude,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, startLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "endLatitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_EndLatitude,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, endLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "endLongitude",
        .dataTypeSpecific.className = NULL,
        .number = OrderAssignRes_FieldNumber_EndLongitude,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OrderAssignRes__storage_, endLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderAssignRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderAssignRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\010\000\002\006\000\003\007\000\006\013\000\007\r\000\010\016\000\t\013\000\n\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderDriverArriveReq

@implementation OrderDriverArriveReq

@dynamic orderId;
@dynamic time;
@dynamic connectUser;

typedef struct OrderDriverArriveReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  uint64_t time;
} OrderDriverArriveReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverArriveReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderDriverArriveReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverArriveReq_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderDriverArriveReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverArriveReq_FieldNumber_ConnectUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderDriverArriveReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderDriverArriveReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderDriverArriveReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderDriverArriveRes

@implementation OrderDriverArriveRes

@dynamic orderId;
@dynamic time;
@dynamic connectUser;

typedef struct OrderDriverArriveRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  uint64_t time;
} OrderDriverArriveRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverArriveRes_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderDriverArriveRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverArriveRes_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderDriverArriveRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverArriveRes_FieldNumber_ConnectUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderDriverArriveRes__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderDriverArriveRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderDriverArriveRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderDriverPickUpReq

@implementation OrderDriverPickUpReq

@dynamic orderId;
@dynamic time;
@dynamic connectUser;

typedef struct OrderDriverPickUpReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  uint64_t time;
} OrderDriverPickUpReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverPickUpReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderDriverPickUpReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverPickUpReq_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderDriverPickUpReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverPickUpReq_FieldNumber_ConnectUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderDriverPickUpReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderDriverPickUpReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderDriverPickUpReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderDriverPickUpRes

@implementation OrderDriverPickUpRes

@dynamic orderId;
@dynamic time;
@dynamic connectUser;

typedef struct OrderDriverPickUpRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  uint64_t time;
} OrderDriverPickUpRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverPickUpRes_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderDriverPickUpRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverPickUpRes_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderDriverPickUpRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderDriverPickUpRes_FieldNumber_ConnectUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderDriverPickUpRes__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderDriverPickUpRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderDriverPickUpRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderRecEndReq

@implementation OrderRecEndReq

@dynamic orderId;
@dynamic orderType;
@dynamic timestamp;

typedef struct OrderRecEndReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
  NSString *orderId;
  uint64_t timestamp;
} OrderRecEndReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecEndReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderRecEndReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecEndReq_FieldNumber_OrderType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderRecEndReq__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecEndReq_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderRecEndReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderRecEndReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderRecEndReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderRecEndRes

@implementation OrderRecEndRes

@dynamic orderId;
@dynamic orderType;
@dynamic timestamp;

typedef struct OrderRecEndRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
  NSString *orderId;
  uint64_t timestamp;
} OrderRecEndRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecEndRes_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderRecEndRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecEndRes_FieldNumber_OrderType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderRecEndRes__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = OrderRecEndRes_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderRecEndRes__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderRecEndRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderRecEndRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderStartReq

@implementation OrderStartReq

@dynamic orderId;
@dynamic time;
@dynamic connectUser;

typedef struct OrderStartReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  uint64_t time;
} OrderStartReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderStartReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderStartReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderStartReq_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderStartReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderStartReq_FieldNumber_ConnectUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderStartReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderStartReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderStartReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderStartRes

@implementation OrderStartRes

@dynamic orderId;
@dynamic time;
@dynamic connectUser;

typedef struct OrderStartRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  uint64_t time;
} OrderStartRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderStartRes_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderStartRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderStartRes_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderStartRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderStartRes_FieldNumber_ConnectUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderStartRes__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderStartRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderStartRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderAutoCostReq

@implementation OrderAutoCostReq

@dynamic connectUser;
@dynamic orderId;
@dynamic passengerId;

typedef struct OrderAutoCostReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectUser;
  NSString *orderId;
  NSString *passengerId;
} OrderAutoCostReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderAutoCostReq_FieldNumber_ConnectUser,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderAutoCostReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderAutoCostReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderAutoCostReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "passengerId",
        .dataTypeSpecific.className = NULL,
        .number = OrderAutoCostReq_FieldNumber_PassengerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderAutoCostReq__storage_, passengerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderAutoCostReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderAutoCostReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\002\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderAutoCostRes

@implementation OrderAutoCostRes

@dynamic connectUser;
@dynamic orderId;
@dynamic passengerId;

typedef struct OrderAutoCostRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectUser;
  NSString *orderId;
  NSString *passengerId;
} OrderAutoCostRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderAutoCostRes_FieldNumber_ConnectUser,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderAutoCostRes__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderAutoCostRes_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderAutoCostRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "passengerId",
        .dataTypeSpecific.className = NULL,
        .number = OrderAutoCostRes_FieldNumber_PassengerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderAutoCostRes__storage_, passengerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderAutoCostRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderAutoCostRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\002\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderPayOkReq

@implementation OrderPayOkReq

@dynamic orderId;
@dynamic cost;
@dynamic connectUser;

typedef struct OrderPayOkReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  double cost;
} OrderPayOkReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderPayOkReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderPayOkReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cost",
        .dataTypeSpecific.className = NULL,
        .number = OrderPayOkReq_FieldNumber_Cost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderPayOkReq__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderPayOkReq_FieldNumber_ConnectUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderPayOkReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderPayOkReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderPayOkReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderPayOkRes

@implementation OrderPayOkRes

@dynamic orderId;
@dynamic cost;
@dynamic connectUser;

typedef struct OrderPayOkRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *connectUser;
  double cost;
} OrderPayOkRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderPayOkRes_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderPayOkRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cost",
        .dataTypeSpecific.className = NULL,
        .number = OrderPayOkRes_FieldNumber_Cost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderPayOkRes__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderPayOkRes_FieldNumber_ConnectUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderPayOkRes__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderPayOkRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderPayOkRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderPrMissReq

@implementation OrderPrMissReq

@dynamic startAdd;
@dynamic endAdd;
@dynamic orderId;
@dynamic time;
@dynamic content;
@dynamic startTime;
@dynamic connectUser;

typedef struct OrderPrMissReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *startAdd;
  NSString *endAdd;
  NSString *orderId;
  NSString *content;
  NSString *connectUser;
  uint64_t time;
  uint64_t startTime;
} OrderPrMissReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissReq_FieldNumber_StartAdd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderPrMissReq__storage_, startAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissReq_FieldNumber_EndAdd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderPrMissReq__storage_, endAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissReq_FieldNumber_OrderId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderPrMissReq__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissReq_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderPrMissReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissReq_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderPrMissReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissReq_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderPrMissReq__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissReq_FieldNumber_ConnectUser,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OrderPrMissReq__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderPrMissReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderPrMissReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\010\000\002\006\000\003\007\000\006\t\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderPrMissRes

@implementation OrderPrMissRes

@dynamic startAdd;
@dynamic endAdd;
@dynamic orderId;
@dynamic time;
@dynamic content;
@dynamic startTime;
@dynamic connectUser;

typedef struct OrderPrMissRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *startAdd;
  NSString *endAdd;
  NSString *orderId;
  NSString *content;
  NSString *connectUser;
  uint64_t time;
  uint64_t startTime;
} OrderPrMissRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissRes_FieldNumber_StartAdd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderPrMissRes__storage_, startAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endAdd",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissRes_FieldNumber_EndAdd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderPrMissRes__storage_, endAdd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissRes_FieldNumber_OrderId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderPrMissRes__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissRes_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderPrMissRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissRes_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderPrMissRes__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissRes_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderPrMissRes__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectUser",
        .dataTypeSpecific.className = NULL,
        .number = OrderPrMissRes_FieldNumber_ConnectUser,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OrderPrMissRes__storage_, connectUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderPrMissRes class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderPrMissRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\010\000\002\006\000\003\007\000\006\t\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DrstatusWebReq

@implementation DrstatusWebReq

@dynamic driverId;

typedef struct DrstatusWebReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *driverId;
} DrstatusWebReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "driverId",
        .dataTypeSpecific.className = NULL,
        .number = DrstatusWebReq_FieldNumber_DriverId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DrstatusWebReq__storage_, driverId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DrstatusWebReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DrstatusWebReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Request

@implementation Request

@dynamic packOneOfCase;
@dynamic msgType;
@dynamic clientType;
@dynamic clientId;
@dynamic phoneType;
@dynamic ping;
@dynamic locationReq;
@dynamic registerReq;
@dynamic orderReq;
@dynamic orderRecReq;
@dynamic orderAssignReq;
@dynamic orderDriverArriveReq;
@dynamic orderDriverPickUpReq;
@dynamic orderRecEndReq;
@dynamic orderStartReq;
@dynamic orderEndReq;
@dynamic orderPayOkReq;
@dynamic orderCancelReq;
@dynamic orderAutoCostReq;
@dynamic userTrackReq;
@dynamic drstatusReq;
@dynamic orderPrMissReq;
@dynamic drstatusWebReq;

typedef struct Request__storage_ {
  uint32_t _has_storage_[2];
  MSG_TYPE msgType;
  CLIENT_TYPE clientType;
  uint32_t phoneType;
  NSString *clientId;
  Ping *ping;
  LocationReq *locationReq;
  RegisterReq *registerReq;
  OrderReq *orderReq;
  OrderRecReq *orderRecReq;
  OrderAssignReq *orderAssignReq;
  OrderDriverArriveReq *orderDriverArriveReq;
  OrderDriverPickUpReq *orderDriverPickUpReq;
  OrderRecEndReq *orderRecEndReq;
  OrderStartReq *orderStartReq;
  OrderEndReq *orderEndReq;
  OrderPayOkReq *orderPayOkReq;
  OrderCancelReq *orderCancelReq;
  OrderAutoCostReq *orderAutoCostReq;
  UserTrackReq *userTrackReq;
  DrstatusReq *drstatusReq;
  OrderPrMissReq *orderPrMissReq;
  DrstatusWebReq *drstatusWebReq;
} Request__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgType",
        .dataTypeSpecific.enumDescFunc = MSG_TYPE_EnumDescriptor,
        .number = Request_FieldNumber_MsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Request__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "clientType",
        .dataTypeSpecific.enumDescFunc = CLIENT_TYPE_EnumDescriptor,
        .number = Request_FieldNumber_ClientType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Request__storage_, clientType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_ClientId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Request__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneType",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_PhoneType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Request__storage_, phoneType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "ping",
        .dataTypeSpecific.className = GPBStringifySymbol(Ping),
        .number = Request_FieldNumber_Ping,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, ping),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "locationReq",
        .dataTypeSpecific.className = GPBStringifySymbol(LocationReq),
        .number = Request_FieldNumber_LocationReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, locationReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "registerReq",
        .dataTypeSpecific.className = GPBStringifySymbol(RegisterReq),
        .number = Request_FieldNumber_RegisterReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, registerReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderReq),
        .number = Request_FieldNumber_OrderReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderRecReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderRecReq),
        .number = Request_FieldNumber_OrderRecReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderRecReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderAssignReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderAssignReq),
        .number = Request_FieldNumber_OrderAssignReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderAssignReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderDriverArriveReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderDriverArriveReq),
        .number = Request_FieldNumber_OrderDriverArriveReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderDriverArriveReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderDriverPickUpReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderDriverPickUpReq),
        .number = Request_FieldNumber_OrderDriverPickUpReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderDriverPickUpReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderRecEndReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderRecEndReq),
        .number = Request_FieldNumber_OrderRecEndReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderRecEndReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderStartReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderStartReq),
        .number = Request_FieldNumber_OrderStartReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderStartReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderEndReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderEndReq),
        .number = Request_FieldNumber_OrderEndReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderEndReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderPayOkReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderPayOkReq),
        .number = Request_FieldNumber_OrderPayOkReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderPayOkReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderCancelReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderCancelReq),
        .number = Request_FieldNumber_OrderCancelReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderCancelReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderAutoCostReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderAutoCostReq),
        .number = Request_FieldNumber_OrderAutoCostReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderAutoCostReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userTrackReq",
        .dataTypeSpecific.className = GPBStringifySymbol(UserTrackReq),
        .number = Request_FieldNumber_UserTrackReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, userTrackReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "drstatusReq",
        .dataTypeSpecific.className = GPBStringifySymbol(DrstatusReq),
        .number = Request_FieldNumber_DrstatusReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, drstatusReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderPrMissReq",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderPrMissReq),
        .number = Request_FieldNumber_OrderPrMissReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, orderPrMissReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "drstatusWebReq",
        .dataTypeSpecific.className = GPBStringifySymbol(DrstatusWebReq),
        .number = Request_FieldNumber_DrstatusWebReq,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, drstatusWebReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Request class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Request__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "pack",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\025\001\007\000\002\n\000\003\010\000\004\t\000\006\013\000\007\013\000\010\010\000\t\013\000\n\016\000\013\024\000\014\024\000\r\016\000\016\r\000"
        "\017\013\000\020\r\000\021\016\000\022\020\000\023\014\000\024\013\000\025\016\000\026\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Request_MsgType_RawValue(Request *message) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_MsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRequest_MsgType_RawValue(Request *message, int32_t value) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_MsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Request_ClientType_RawValue(Request *message) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_ClientType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRequest_ClientType_RawValue(Request *message, int32_t value) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_ClientType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void Request_ClearPackOneOfCase(Request *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Response

@implementation Response

@dynamic packOneOfCase;
@dynamic msgType;
@dynamic retCode;
@dynamic result;
@dynamic pong;
@dynamic locationRes;
@dynamic registerRes;
@dynamic orderRes;
@dynamic orderRecRes;
@dynamic orderAssignRes;
@dynamic orderDriverArriveRes;
@dynamic orderDriverPickUpRes;
@dynamic orderRecEndRes;
@dynamic orderStartRes;
@dynamic orderEndRes;
@dynamic orderPayOkRes;
@dynamic orderCancelRes;
@dynamic orderAutoCostRes;
@dynamic userTrackRes;
@dynamic drstatusRes;
@dynamic orderPrMissRes;

typedef struct Response__storage_ {
  uint32_t _has_storage_[2];
  MSG_TYPE msgType;
  RET_CODE retCode;
  NSString *result;
  Pong *pong;
  LocationRes *locationRes;
  RegisterRes *registerRes;
  OrderRes *orderRes;
  OrderRecRes *orderRecRes;
  OrderAssignRes *orderAssignRes;
  OrderDriverArriveRes *orderDriverArriveRes;
  OrderDriverPickUpRes *orderDriverPickUpRes;
  OrderRecEndRes *orderRecEndRes;
  OrderStartRes *orderStartRes;
  OrderEndRes *orderEndRes;
  OrderPayOkRes *orderPayOkRes;
  OrderCancelRes *orderCancelRes;
  OrderAutoCostRes *orderAutoCostRes;
  UserTrackRes *userTrackRes;
  DrstatusRes *drstatusRes;
  OrderPrMissRes *orderPrMissRes;
} Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgType",
        .dataTypeSpecific.enumDescFunc = MSG_TYPE_EnumDescriptor,
        .number = Response_FieldNumber_MsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Response__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.enumDescFunc = RET_CODE_EnumDescriptor,
        .number = Response_FieldNumber_RetCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Response__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_Result,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Response__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pong",
        .dataTypeSpecific.className = GPBStringifySymbol(Pong),
        .number = Response_FieldNumber_Pong,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, pong),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "locationRes",
        .dataTypeSpecific.className = GPBStringifySymbol(LocationRes),
        .number = Response_FieldNumber_LocationRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, locationRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "registerRes",
        .dataTypeSpecific.className = GPBStringifySymbol(RegisterRes),
        .number = Response_FieldNumber_RegisterRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, registerRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderRes),
        .number = Response_FieldNumber_OrderRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderRecRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderRecRes),
        .number = Response_FieldNumber_OrderRecRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderRecRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderAssignRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderAssignRes),
        .number = Response_FieldNumber_OrderAssignRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderAssignRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderDriverArriveRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderDriverArriveRes),
        .number = Response_FieldNumber_OrderDriverArriveRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderDriverArriveRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderDriverPickUpRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderDriverPickUpRes),
        .number = Response_FieldNumber_OrderDriverPickUpRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderDriverPickUpRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderRecEndRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderRecEndRes),
        .number = Response_FieldNumber_OrderRecEndRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderRecEndRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderStartRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderStartRes),
        .number = Response_FieldNumber_OrderStartRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderStartRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderEndRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderEndRes),
        .number = Response_FieldNumber_OrderEndRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderEndRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderPayOkRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderPayOkRes),
        .number = Response_FieldNumber_OrderPayOkRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderPayOkRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderCancelRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderCancelRes),
        .number = Response_FieldNumber_OrderCancelRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderCancelRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderAutoCostRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderAutoCostRes),
        .number = Response_FieldNumber_OrderAutoCostRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderAutoCostRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userTrackRes",
        .dataTypeSpecific.className = GPBStringifySymbol(UserTrackRes),
        .number = Response_FieldNumber_UserTrackRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, userTrackRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "drstatusRes",
        .dataTypeSpecific.className = GPBStringifySymbol(DrstatusRes),
        .number = Response_FieldNumber_DrstatusRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, drstatusRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderPrMissRes",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderPrMissRes),
        .number = Response_FieldNumber_OrderPrMissRes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, orderPrMissRes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Response class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Response__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "pack",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\022\001\007\000\002\007\000\005\013\000\006\013\000\007\010\000\010\013\000\t\016\000\n\024\000\013\024\000\014\016\000\r\r\000\016\013\000\017\r\000"
        "\020\016\000\021\020\000\022\014\000\023\013\000\024\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Response_MsgType_RawValue(Response *message) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_MsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetResponse_MsgType_RawValue(Response *message, int32_t value) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_MsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Response_RetCode_RawValue(Response *message) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_RetCode];
  return GPBGetMessageInt32Field(message, field);
}

void SetResponse_RetCode_RawValue(Response *message, int32_t value) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_RetCode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void Response_ClearPackOneOfCase(Response *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
